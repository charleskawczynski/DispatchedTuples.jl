var documenterSearchIndex = {"docs":
[{"location":"#DispatchedTuples.jl","page":"Home","title":"DispatchedTuples.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DispatchedTuples.jl defines one user-facing type: DispatchedTuple, and one user-facing method: dispatch. A DispatchedTuple is similar to a compile-time dictionary, that uses dispatch for the look-up.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DispatchedTuple takes a Tuple of Pairs, where the first field of the Pair (the \"key\") is an instance of the type you want to dispatch on. The second field of the Pair is the quantity (the \"value\", which can be anything) returned by dispatch.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is an example in action","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DispatchedTuples\nstruct Foo end;\nstruct Bar end;\ndtup = DispatchedTuple((\n               Pair(Foo(), 1),\n               Pair(Bar(), 2),\n           ))\n\nprintln(dispatch(dtup, Foo()))\nprintln(dispatch(dtup, Bar()))","category":"page"},{"location":"","page":"Home","title":"Home","text":"If a DispatchedTuple has duplicate keys, then all values are returned in the Tuple. Here's an example with duplicate keys:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DispatchedTuples\nstruct Foo end\nstruct Bar end\n\ndtup = DispatchedTuple((\n               Pair(Foo(), 1),\n               Pair(Foo(), 3),\n               Pair(Bar(), 2),\n           ))\n\nprintln(dispatch(dtup, Foo()))\nprintln(dispatch(dtup, Bar()))","category":"page"},{"location":"","page":"Home","title":"Home","text":"The second (optional) argument to DispatchedTuple is a default value, which is returned for any unrecognized keys. If the default value is not given, and dispatch is called with a key it hasn't seen, an error is thrown.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For convenience, DispatchedTuple can alternatively take a Tuple of two-element Tuples.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DispatchedTuples.AbstractDispatchedTuple\nDispatchedTuples.DispatchedTuple\nDispatchedTuples.DispatchedTupleSet\nDispatchedTuples.dispatch","category":"page"},{"location":"#DispatchedTuples.AbstractDispatchedTuple","page":"Home","title":"DispatchedTuples.AbstractDispatchedTuple","text":"AbstractDispatchedTuple{T <: Tuple, D}\n\nAn abstract dispatch tuple type, for sub-typing dispatched tuples.\n\n\n\n\n\n","category":"type"},{"location":"#DispatchedTuples.DispatchedTuple","page":"Home","title":"DispatchedTuples.DispatchedTuple","text":"DispatchedTuple(tup[, default_value])\n\nA dispatch-able tuple.\n\nDispatchedTuple takes a Tuple of Pairs, where the first field of the Pair (the \"key\") is an instance of the type you want to dispatch on. The second field of the Pair is the quantity (the \"value\", which can be anything) returned by dispatch.\n\nIf a DispatchedTuple has duplicate keys, then all values are returned in the Tuple.\n\nThe second (optional) argument to DispatchedTuple is a default value, which is returned for any unrecognized keys. If the default value is not given, and dispatch is called with a key it hasn't seen, an error is thrown.\n\nFor convenience, DispatchedTuple can alternatively take a Tuple of two-element Tuples.\n\n\n\n\n\n","category":"type"},{"location":"#DispatchedTuples.DispatchedTupleSet","page":"Home","title":"DispatchedTuples.DispatchedTupleSet","text":"DispatchedTupleSet(tup[, default_value])\n\nSimilar to DispatchedTuple, except:\n\nkeys must be unique.\nreturns the value, and not a tuple of values.\nthrows an error in dispatch if keys are not unique.\n\n\n\n\n\n","category":"type"},{"location":"#DispatchedTuples.dispatch","page":"Home","title":"DispatchedTuples.dispatch","text":"dispatch(::DispatchedTuple, type_instance)\n\nDispatch on the DispatchedTuple, based on the instance of the input type type_instance.\n\n\n\n\n\ndispatch(::DispatchedTupleSet, type_instance)\n\nDispatch on the DispatchedTupleSet, based on the instance of the input type type_instance.\n\n\n\n\n\n","category":"function"}]
}
